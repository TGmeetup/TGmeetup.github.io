{"version":3,"sources":["webpack:///./src/pages/groups.js"],"names":["GroupCardWrapper","styled","div","Card","Title","Content","GroupCard","group","color","to","id","title","events","map","event","Item","key","onClick","navigate","moment","dateTime","calendar","name","Footer","Actions","Action","city","target","href","registration","url","type","Badge","length","Wrapper","withLayout","groups","data","seo","groupListToSEO","edges","edge","node","filter","xs","md","query"],"mappings":"iTAeMA,EAAmBC,IAAOC,IAAV,2EAAGD,CAAH,wJAGlBE,IAIAA,IAAKC,MAQLD,IAAKE,SAMHC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAChB,kBAACP,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAKI,MAAN,CAAYI,MAAOD,EAAMC,OACvB,kBAAC,IAAD,CAAMC,GAAE,WAAaF,EAAMG,IACzB,4BAAMH,EAAMI,SAGhB,kBAAC,IAAKN,QAAN,KACEE,EAAMK,OAAOC,KAAI,SAAAC,GAAK,OACtB,kBAAC,IAAKC,KAAN,CACEC,IAAKF,EAAMJ,GACXO,QAAS,kBAAMC,YAAS,WAAWJ,EAAMJ,MAEzC,kBAAC,IAAD,MACCS,EAAOL,EAAMM,UAAUC,WACvB,IACD,2BAAIP,EAAMQ,WAId,kBAAC,IAAKC,OAAN,KACE,kBAAC,IAAKC,QAAN,KACE,kBAAC,IAAKC,OAAN,KACE,kBAAC,IAAD,MACA,8BAAQlB,EAAMmB,OAEhB,kBAAC,IAAKD,OAAN,CACEE,OAAO,SACPC,KAAMrB,EAAMsB,aAAaC,KAEzB,kBAAC,IAAD,MACA,2BAAKvB,EAAMsB,aAAaE,OAE1B,kBAAC,IAAKN,OAAN,CAAaR,QAAS,kBAAMC,YAAS,WAAWX,EAAMG,MAClD,kBAAC,IAAD,MACA,kBAAC,IAAKsB,MAAN,KAAazB,EAAMK,OAAOqB,QAC1B,8CAQRC,EAAUjC,IAAOC,IAAV,kEAAGD,CAAH,oDA6BEkC,uBAxBG,SAAC,GAAD,IAAWC,EAAX,EAAGC,KAAQD,OAAX,OAChB,kBAACF,EAAD,KACE,kBAAC,IAAD,CAAKI,IAAKC,YAAeH,EAAOI,MAAM3B,KAAI,SAAA4B,GAAI,OAAIA,EAAKC,WACvD,kBAAC,OAAD,KACE,kBAAC,MAAD,KACEN,EAAOI,MAAM3B,KAAI,SAAA4B,GAAI,OAAIA,EAAKC,QAAMC,QAAO,SAAApC,GAAK,OAAIA,EAAMK,OAAOqB,OAAS,KAAGpB,KAAI,SAAAN,GAAK,OACtF,kBAAC,MAAD,CAAKS,IAAKT,EAAMG,GAAIkC,GAAI,GAAIC,GAAI,GAC9B,kBAAC,IAAD,KACE,kBAACvC,EAAD,CAAWC,MAAOA,SAItB6B,EAAOI,MAAM3B,KAAI,SAAA4B,GAAI,OAAIA,EAAKC,QAAMC,QAAO,SAAApC,GAAK,OAA4B,IAAxBA,EAAMK,OAAOqB,UAAcpB,KAAI,SAAAN,GAAK,OACxF,kBAAC,MAAD,CAAKS,IAAKT,EAAMG,GAAIkC,GAAI,GAAIC,GAAI,GAC9B,kBAAC,IAAD,KACE,kBAACvC,EAAD,CAAWC,MAAOA,eAWvB,IAAMuC,EAAK","file":"component---src-pages-groups-js-7b07b72fef849d31273a.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport * as moment from 'moment';\nimport { graphql, navigate } from 'gatsby';\n\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport { GoGitCommit } from 'react-icons/go';\nimport { TiLocation, TiTicket, TiWorld } from 'react-icons/ti';\n\nimport Link from '../elements/Link';\nimport SEO, { groupListToSEO } from '../components/SEO';\nimport Card from '../blocks/Card';\nimport FadeIn from '../components/FadeIn';\nimport { withLayout } from '../layouts';\n\nconst GroupCardWrapper = styled.div`\n  margin-bottom: 1em;\n\n  ${Card} {\n    height: 500px;\n  }\n\n  ${Card.Title} {\n    padding-top: 0;\n    display: flex;\n    align-items: flex-end;\n    height: 6em;\n    flex: 0 0 auto;\n  }\n\n  ${Card.Content} {\n    flex: 1 1 auto;\n    overflow: auto;\n  }\n`;\n\nconst GroupCard = ({ group }) => (\n  <GroupCardWrapper>\n    <Card>\n      <Card.Title color={group.color}>\n        <Link to={`/groups/${group.id}`}>\n          <h2>{ group.title }</h2>\n        </Link>\n      </Card.Title>\n      <Card.Content>\n      { group.events.map(event => (\n        <Card.Item\n          key={event.id}\n          onClick={() => navigate(`/events/${event.id}`)}\n        >\n          <GoGitCommit />\n          {moment(event.dateTime).calendar()}\n          {' '}\n          <b>{event.name}</b>\n        </Card.Item>\n      ))}\n      </Card.Content>\n      <Card.Footer>\n        <Card.Actions>\n          <Card.Action>\n            <TiLocation />\n            <span>{ group.city }</span>\n          </Card.Action>\n          <Card.Action\n            target=\"_blank\"\n            href={group.registration.url}\n          >\n            <TiWorld />\n            <p>{ group.registration.type }</p>\n          </Card.Action>\n          <Card.Action onClick={() => navigate(`/groups/${group.id}`)}>\n              <TiTicket />\n              <Card.Badge>{group.events.length}</Card.Badge>\n              <span>Events</span>\n          </Card.Action>\n        </Card.Actions>\n      </Card.Footer>\n    </Card>\n  </GroupCardWrapper>\n);\n\nconst Wrapper = styled.div`\n  background: #f8f9fa;\n  padding-top: 1em;\n  width: 100%;\n`\nconst GroupView = ({ data: { groups } }) => (\n  <Wrapper>\n    <SEO seo={groupListToSEO(groups.edges.map(edge => edge.node))} />\n    <Grid>\n      <Row>\n      { groups.edges.map(edge => edge.node).filter(group => group.events.length > 0).map(group => (\n        <Col key={group.id} xs={12} md={4}>\n          <FadeIn>\n            <GroupCard group={group} />\n          </FadeIn>\n        </Col>\n      ))}\n      { groups.edges.map(edge => edge.node).filter(group => group.events.length === 0).map(group => (\n        <Col key={group.id} xs={12} md={4}>\n          <FadeIn>\n            <GroupCard group={group} />\n          </FadeIn>\n        </Col>\n      ))}\n      </Row>\n    </Grid>\n  </Wrapper>\n)\n\nexport default withLayout(GroupView);\n\nexport const query = graphql`\n  query GroupsQuery {\n    groups: allTgmeetupGroup {\n      edges {\n        node {\n          id\n          title\n          color\n          city\n          description\n          registration {\n            type\n            url\n          }\n          contact\n          events {\n            id\n            name\n            dateTime\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}